generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @default("User")
  email         String    @unique
  emailVerified DateTime?
  image         String?   @default("https://avatars.dicebear.com/api/open-peeps/your-custom-seed.svg")
  accounts      Account[]
  sessions      Session[]
  Content       Content[]
  Comment       Comment[]
  mention       Mention[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  url         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.ObjectId
  upvotes     Int          @default(0)
  downvotes   Int          @default(0)
  comments    Comment[]
  mentions    Mention[]
  hashtags    Hashtag[]
  categories  Categories[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  content   Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String    @db.ObjectId
  mentions  Mention[]
  hashtags  Hashtag[]
}

model Mention {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @db.ObjectId
  Content   Content? @relation(fields: [contentId], references: [id])
  contentId String?  @db.ObjectId
}

model Hashtag {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
}

model Categories {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String  @db.ObjectId
}
